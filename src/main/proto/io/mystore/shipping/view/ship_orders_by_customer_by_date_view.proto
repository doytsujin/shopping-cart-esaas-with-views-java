syntax = "proto3";

package io.mystore.shipping.view;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "akkaserverless/annotations.proto";
import "google/protobuf/timestamp.proto";
import "io/mystore/shipping/entity/ship_order_entity.proto";
import "io/mystore/shipping/view/ship_order.proto";

option java_outer_classname = "ShipOrdersByCustomerByDateModel";

service ShipOrdersByCustomerByDate {
  option (akkaserverless.codegen) = {
    view: {}
  };

  rpc GetShipOrdersByCustomerByDate(ShipOrdersByCustomerByDateRequest) returns (ShipOrdersByCustomerByDateResponse) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS ship_orders"
             "  FROM ship_orders_by_customer_by_date"
             " WHERE customer_id = :customer_id"
             "   AND ordered_utc.seconds >= :`from_date.seconds`"
             "   AND ordered_utc.seconds < :`to_date.seconds`"
    };
    option (google.api.http) = {
      get: "/ship-orders-by-customer-by-date"
    };
  }

  rpc OnShipOrderCreated(entity.ShipOrderCreated) returns (ShipOrder) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "ship_order"
    };
    option (akkaserverless.method).view.update = {
      table: "ship_orders_by_customer_by_date"
      transform_updates: true
    };
  }

  rpc OnOrderShipped(entity.OrderShipped) returns (ShipOrder) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "ship_order"
    };
    option (akkaserverless.method).view.update = {
      table: "ship_orders_by_customer_by_date"
      transform_updates: true
    };
  }

  rpc OnOrderSkuShipped(entity.OrderSkuShipped) returns (ShipOrder) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "ship_order"
    };
    option (akkaserverless.method).view.update = {
      table: "ship_orders_by_customer_by_date"
      transform_updates: true
    };
  }

  rpc OnOrderItemShipped(entity.OrderItemShipped) returns (ShipOrder) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "ship_order"
    };
    option (akkaserverless.method).view.update = {
      table: "ship_orders_by_customer_by_date"
      transform_updates: true
    };
  }

  rpc IgnoreOtherEvents(google.protobuf.Any) returns (ShipOrder) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "ship_order"
    };
    option (akkaserverless.method).view.update = {
      table: "ship_orders_by_customer_by_date"
      transform_updates: true
    };
  }
}

message ShipOrdersByCustomerByDateRequest {
  string customer_id = 1;
  google.protobuf.Timestamp from_date = 2;
  google.protobuf.Timestamp to_date = 3;
}

message ShipOrdersByCustomerByDateResponse {
  repeated ShipOrder ship_orders = 1;
}

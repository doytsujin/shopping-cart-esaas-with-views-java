syntax = "proto3";

package io.mystore.shipping.view;

import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "io/mystore/shipping/view/ship_order_item.proto";
import "io/mystore/shipping/entity/ship_order_item_entity.proto";

option java_outer_classname = "BackOrderedShipOrderItemsBySkuModel";

service BackOrderedShipOrderItemsBySku {
  option (akkaserverless.codegen) = {
    view: {}
  };

  rpc GetBackOrderedShipOrderItemsBySku(GetBackOrderedOrderItemsBySkuRequest) returns (GetBackOrderedOrderItemsBySkuResponse) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS ship_order_items"
             "  FROM back_ordered_ship_order_items_by_sku"
             " WHERE back_ordered_utc.seconds > 0"
             "   AND sku_id = :skuId"
    };
    option (google.api.http) = {
      get: "/back-ordered-ship-order-items-by-sku"
    };
  }

  rpc OnOrderItemCreated(entity.OrderItemCreated) returns (ShipOrderItem) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "ship_order_item"
    };
    option (akkaserverless.method).view.update = {
      table: "back_ordered_ship_order_items_by_sku"
      transform_updates: true
    };
  }

  rpc OnJoinedToSkuItem(entity.JoinedToSkuItem) returns (ShipOrderItem) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "ship_order_item"
    };
    option (akkaserverless.method).view.update = {
      table: "back_ordered_ship_order_items_by_sku"
      transform_updates: true
    };
  }

  rpc OnOrderItemBackOrdered(entity.OrderItemBackOrdered) returns (ShipOrderItem) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "ship_order_item"
    };
    option (akkaserverless.method).view.update = {
      table: "back_ordered_ship_order_items_by_sku"
      transform_updates: true
    };
  }

  rpc IgnoreOtherEvents(google.protobuf.Any) returns (ShipOrderItem) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "ship_order_item"
    };
    option (akkaserverless.method).view.update = {
      table: "back_ordered_ship_order_items_by_sku"
      transform_updates: true
    };
  }
}

message GetBackOrderedOrderItemsBySkuRequest {
  string skuId = 1;
}

message GetBackOrderedOrderItemsBySkuResponse {
  repeated ShipOrderItem ship_order_items = 1;
}

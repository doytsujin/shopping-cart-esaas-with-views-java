syntax = "proto3";

package io.mystore.shipping.view;

import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "io/mystore/shipping/entity/ship_sku_item_entity.proto";

option java_outer_classname = "AvailableShipSkuItemsModel";

service AvailableShipSkuItems {
  option (akkaserverless.codegen) = {
    view: {}
  };

  rpc GetAvailableShipSkuItems(GetAvailableShipSkuItemsRequest) returns (GetAvailableShipSkuItemsResponse) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS ship_sku_items"
             "  FROM available_ship_sku_items"
             " WHERE sku_id = :sku_id"
             "   AND shipped_utc.seconds > 0"
    };
    option (google.api.http) = {
      get: "/available-ship-sku-items"
    };
  }

  rpc ProcessSkuItemCreated(entity.SkuItemCreated) returns (ShipSkuItem) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "ship_sku_item"
    };
    option (akkaserverless.method).view.update = {
      table: "available_ship_sku_items"
      transform_updates: true
    };
  }

  rpc ProcessShipOrderItemAdded(entity.ShipOrderItemAdded) returns (ShipSkuItem) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "ship_sku_item"
    };
    option (akkaserverless.method).view.update = {
      table: "available_ship_sku_items"
      transform_updates: true
    };
  }

  rpc ProcessReleasedSkuItemFromOrder(entity.ReleasedSkuItemFromOrder) returns (ShipSkuItem) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "ship_sku_item"
    };
    option (akkaserverless.method).view.update = {
      table: "available_ship_sku_items"
      transform_updates: true
    };
  }

  rpc IgnoreOtherEvents(google.protobuf.Any) returns (ShipSkuItem) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "ship_sku_item"
    };
    option (akkaserverless.method).view.update = {
      table: "available_ship_sku_items"
      transform_updates: true
    };
  }
}

message GetAvailableShipSkuItemsRequest {
  string sku_id = 1;
}

message GetAvailableShipSkuItemsResponse {
  repeated ShipSkuItem ship_sku_items = 1;
}

message ShipSkuItem {
  string sku_id = 1;
  string sku_name = 2;
  string sku_item_id = 3;
  google.protobuf.Timestamp shipped_utc = 4;
}

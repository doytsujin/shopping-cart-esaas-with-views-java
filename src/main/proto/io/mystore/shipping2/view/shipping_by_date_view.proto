syntax = "proto3";

package io.mystore.shipping2.view;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "akkaserverless/annotations.proto";
import "google/protobuf/timestamp.proto";
import "io/mystore/shipping2/entity/shipping_entity.proto";
import "io/mystore/shipping2/view/shipping.proto";

option java_outer_classname = "ShippingByDateModel";

service ShippingByDate {
  option (akkaserverless.codegen) = {
    view: {}
  };

  rpc GetShippingByDate(ShippingByDateRequest) returns (ShippingByDateResponse) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS shipping"
             "  FROM shipping_by_date"
             " WHERE ordered_utc.seconds >= :`from_date.seconds`"
             "   AND ordered_utc.seconds < :`to_date.seconds`"
    };
    option (google.api.http) = {
      get: "/shipping-by-date"
    };
  }

  rpc OnOrderCreated(entity.OrderCreated) returns (Shipping) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "shipping"
    };
    option (akkaserverless.method).view.update = {
      table: "shipping_by_date"
      transform_updates: true
    };
  }

  rpc OnOrderShipped(entity.OrderShipped) returns (Shipping) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "shipping"
    };
    option (akkaserverless.method).view.update = {
      table: "shipping_by_date"
      transform_updates: true
    };
  }

  rpc OnOrderItemShipped(entity.OrderItemShipped) returns (Shipping) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "shipping"
    };
    option (akkaserverless.method).view.update = {
      table: "shipping_by_date"
      transform_updates: true
    };
  }

  rpc OnOrderSkuItemShipped(entity.OrderSkuItemShipped) returns (Shipping) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "shipping"
    };
    option (akkaserverless.method).view.update = {
      table: "shipping_by_date"
      transform_updates: true
    };
  }

  rpc IgnoreOtherEvents(google.protobuf.Any) returns (Shipping) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "shipping"
    };
    option (akkaserverless.method).view.update = {
      table: "shipping_by_date"
      transform_updates: true
    };
  }
}

message ShippingByDateRequest {
  google.protobuf.Timestamp from_date = 1;
  google.protobuf.Timestamp to_date = 2;
}

message ShippingByDateResponse {
  repeated Shipping shipping = 1;
}

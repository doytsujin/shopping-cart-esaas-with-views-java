syntax = "proto3";

package io.mystore.purchased_product.view;

import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "io/mystore/purchased_product/entity/purchased_product_entity.proto";
import "io/mystore/purchased_product/view/purchased_product.proto";

option java_outer_classname = "PurchasedProductsByProductByDateModel";

service PurchasedProductsByProductByDate {
  option (akkaserverless.service) = {
    type: SERVICE_TYPE_VIEW
  };

  rpc GetPurchasedProductsByProductByDate(PurchasedProductsRequestByProduct) returns (PurchasedProductsResponseByProduct) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS purchased_products"
             "  FROM purchased_products"
             " WHERE sku_id = :sku_id"
             "   AND purchased_utc.seconds >= :`from_date.seconds`"
             "   AND purchased_utc.seconds <= :`to_date.seconds`"
    };
    option (google.api.http) = {
      post: "/purchased-products-by-sku-by-date",
      body: "*"
    };
  }

  rpc ProcessItemCheckedOut(entity.PurchasedProductState) returns (PurchasedProduct) {
    option (akkaserverless.method).eventing.in = {
      value_entity: "purchased_product"
    };
    option (akkaserverless.method).view.update = {
      table: "purchased_products"
      transform_updates: true
    };
  }

  rpc IgnoreOtherEvents(google.protobuf.Any) returns (PurchasedProduct) {
    option (akkaserverless.method).eventing.in = {
      value_entity: "purchased_product"
    };
    option (akkaserverless.method).view.update = {
      table: "purchased_products"
      transform_updates: true
    };
  }
}

message PurchasedProductsRequestByProduct {
  string sku_id = 1;
  google.protobuf.Timestamp from_date = 2;
  google.protobuf.Timestamp to_date = 3;
}

message PurchasedProductsResponseByProduct {
  repeated PurchasedProduct purchased_products = 1;
}

syntax = "proto3";

package io.mystore.order.view;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "akkaserverless/annotations.proto";
import "google/protobuf/timestamp.proto";
import "io/mystore/order/entity/order_item_entity.proto";
import "io/mystore/order/view/ordered_item.proto";

option java_outer_classname = "OrderedItemsByCustomerByDateModel";

service OrderedItemsByCustomerByDate {
  option (akkaserverless.codegen) = {
    view: {}
  };

  rpc GetOrderedItemsByCustomerByDate(OrderedItemsRequestByCustomer) returns (OrderedItemsResponseByCustomer) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS ordered_items"
             "  FROM ordered_items"
             " WHERE customer_id = :customer_id"
             "   AND ordered_utc.seconds >= :`from_date.seconds`"
             "   AND ordered_utc.seconds < :`to_date.seconds`"
    };
    option (google.api.http) = {
      get: "/ordered-items-by-customer-by-date"
    };
  }

  rpc OnOrdered(entity.OrderItemState) returns (OrderedItem) {
    option (akkaserverless.method).eventing.in = {
      value_entity: "order_item"
    };
    option (akkaserverless.method).view.update = {
      table: "ordered_items"
      transform_updates: true
    };
  }

  rpc IgnoreOtherEvents(google.protobuf.Any) returns (OrderedItem) {
    option (akkaserverless.method).eventing.in = {
      value_entity: "order_item"
    };
    option (akkaserverless.method).view.update = {
      table: "ordered_items"
      transform_updates: true
    };
  }
}

message OrderedItemsRequestByCustomer {
  string customer_id = 1;
  google.protobuf.Timestamp from_date = 2;
  google.protobuf.Timestamp to_date = 3;
}

message OrderedItemsResponseByCustomer {
  repeated OrderedItem ordered_items = 1;
}

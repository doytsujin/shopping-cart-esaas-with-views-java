syntax = "proto3";

package io.shopping.cart.view;

import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "akkaserverless/annotations.proto";
import "io/shopping/cart/api/purchased_product_api.proto";
import "io/shopping/cart/entity/purchased_product_entity.proto";

option java_outer_classname = "PurchasedProductsView";

service ProductsView {
  option (akkaserverless.service) = {
    type: SERVICE_TYPE_VIEW
  };

  rpc GetPurchasedProducts(GetPurchasedProductsRequest) returns (GetPurchasedProductsResponse) {
    option (akkaserverless.method).view.query = {
      query: "SELECT * AS purchased_products FROM purchased_products WHERE product_id = :product_id AND purchased_utc >= :from_date AND purchased_utc <= :to_date"
    };
    option (google.api.http) = {
      get: "/purchased-products/{product_id}"
    };
  }

  rpc ProcessItemCheckedOut(entity.PurchasedProductState) returns (api.PurchasedProduct) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "purchased_product"
    };
    option (akkaserverless.method).view.update = {
      table: "purchased_products"
      transform_updates: true
    };
  }

  rpc IgnoreOtherEvents(google.protobuf.Any) returns (api.PurchasedProduct) {
    option (akkaserverless.method).eventing.in = {
      event_sourced_entity: "purchased_product"
    };
    option (akkaserverless.method).view.update = {
      table: "purchased_products"
      transform_updates: true
    };
  }
}

message GetPurchasedProductsRequest {
  string product_id = 1;
  string from_date = 2;
  string to_date = 3;
}

message GetPurchasedProductsResponse {
  repeated api.PurchasedProduct purchased_products = 1;
}
